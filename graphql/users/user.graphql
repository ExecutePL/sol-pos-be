extend type Query {
    users: [User!]! @paginate
    user(id: ID! @eq): User @find
    me: User! @guard @auth
}

extend type Mutation {
    createUser(
        name: String!
        email: String! @rules(apply: ["email", "unique:users"])
        password: String! @rules(apply: ["min:8"])
    ): User!
    updateUser(id: ID!, input: UpdateUserInput! @spread): User! @update
    deleteUser(id: ID!): User! @delete
    loginUser(email: String!, password: String!): User!
    logoutUser: User @guard
}

input CreateUserInput
input UpdateUserInput
input BelongsToUser
input BelongsToManyUsers
input HasOneUser
input HasManyUsers

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    wallet_address: String
    password: String!
    created_at: DateTime!
    updated_at: DateTime!
    products: [Product!] @hasMany
    pointsOfSale: [PointOfSale!] @hasMany
    workers: [Worker!] @hasMany
    bills: [Bill!] @hasMany
}

#import user.input.graphql
